<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Data Input Form</title>
  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"
    integrity="sha512-9usAa10IRO0HhonpyAIVpjrylPvoDwiPUiKdWk5t3PyolY1cOd4DSE0Ga+ri4AuTroPR5aQvXU9xC6qOPnzFeg=="
    crossorigin="anonymous" referrerpolicy="no-referrer" />
  <style>
    .add-button {
      cursor: pointer;
      color: #66a6ff;
    }
  </style>
</head>

<body>
  <div class="container mt-5">
    <h1>Component Data Input</h1>
    <form id="componentForm">
      <!-- Name Input -->
      <div class="mb-3">
        <label for="name" class="form-label">Name</label>
        <input type="text" class="form-control" id="name" required>
      </div>

      <!-- Tags Input -->
      <div class="mb-3">
        <label for="tags" class="form-label">Tags (comma-separated)</label>
        <input type="text" class="form-control" id="tags" required>
      </div>

      <!-- Programming Language Input -->
      <div class="mb-3">
        <label for="programming_language" class="form-label">Programming Language</label>
        <select class="form-select" id="programming_language" required>
          <option value="" disabled selected>Select a language</option>
          <option value="kotlin">Kotlin</option>
          <option value="java">Java</option>
          <option value="python">Python</option>
          <option value="javascript">JavaScript</option>
          <option value="csharp">C#</option>
          <!-- Add more languages as needed -->
        </select>
      </div>

      <!-- Pics Input -->
      <div class="mb-3">
        <label class="form-label">Pics
          <span class="add-button" id="addPic"><i class="fas fa-plus"></i></span>
        </label>
        <div id="picsContainer">
          <div class="input-group mb-2" data-pic-id="1">
            <input type="file" class="form-control pic-input" accept="image/*" data-pic-id="1" multiple required>
            <button type="button" class="btn btn-danger remove-pic" data-pic-id="1"><i
                class="fas fa-minus"></i></button>
          </div>
        </div>
      </div>

      <!-- Params Input -->
      <div class="mb-3">
        <label class="form-label">Params
          <span class="add-button" id="addParam"><i class="fas fa-plus"></i></span>
        </label>
        <div id="paramsContainer">
          <div class="param-group mb-2" data-param-id="1">
            <div class="input-group mb-2">
              <input type="text" class="form-control param-input" placeholder="Param" data-param-id="1"
                data-field="param" required>
              <input type="text" class="form-control param-input" placeholder="Description" data-param-id="1"
                data-field="desc" required>
              <div class="input-group-text">
                <input type="checkbox" class="param-input" data-param-id="1" data-field="required"
                  aria-label="Checkbox for following text input">
                <label for="checkbox" class="ms-2">Required</label>
              </div>
              <button type="button" class="btn btn-danger remove-param" data-param-id="1"><i
                  class="fas fa-minus"></i></button>
            </div>
          </div>
        </div>
      </div>

      <!-- Snippets Input -->
      <div class="mb-3">
        <label class="form-label">Snippets
          <span class="add-button" id="addSnippet"><i class="fas fa-plus"></i></span>
        </label>
        <div id="snippetsContainer">
          <div class="snippet-group mb-2" data-snippet-id="1">
            <div class="input-group mb-2">
              <input type="text" class="form-control snippet-input" placeholder="File Name" data-snippet-id="1"
                data-field="file_name" required>
              <textarea class="form-control snippet-input" placeholder="Snippet Content" data-snippet-id="1"
                data-field="snippet" rows="3" required></textarea>
              <button type="button" class="btn btn-danger remove-snippet" data-snippet-id="1"><i
                  class="fas fa-minus"></i></button>
            </div>

          </div>
        </div>
      </div>

      <button type="submit" class="btn btn-primary">Generate JSON</button>
    </form>

    <div id="json-preview" class="mt-3">
      <h3>JSON Preview</h3>
      <pre><code id="json-output"></code></pre>
    </div>
  </div>

  <!-- Bootstrap JS -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', function () {
        const form = document.getElementById('componentForm');
        const picsContainer = document.getElementById('picsContainer');
        const paramsContainer = document.getElementById('paramsContainer');
        const snippetsContainer = document.getElementById('snippetsContainer');
        const jsonOutput = document.getElementById('json-output');
        const jsonPreviewDiv = document.getElementById('json-preview');
        const addPicButton = document.getElementById('addPic');
        const addParamButton = document.getElementById('addParam');
        const addSnippetButton = document.getElementById('addSnippet');


        let picIdCounter = 2;
        let paramIdCounter = 2;
        let snippetIdCounter = 2;

          addPicButton.addEventListener('click', function () {
            const newPicInput = document.createElement('div');
              newPicInput.className = 'input-group mb-2';
            newPicInput.setAttribute("data-pic-id", picIdCounter);
              newPicInput.innerHTML = `
                 <input type="file" class="form-control pic-input" accept="image/*" data-pic-id="${picIdCounter}" multiple required>
                  <button type="button" class="btn btn-danger remove-pic" data-pic-id = "${picIdCounter}"><i class="fas fa-minus"></i></button>
              `;

              picsContainer.appendChild(newPicInput);
              picIdCounter++;
          });
        addParamButton.addEventListener('click', function () {
          const newParamInput = document.createElement('div');
            newParamInput.className = 'param-group mb-2';
            newParamInput.setAttribute("data-param-id", paramIdCounter)
          newParamInput.innerHTML = `
                <div class="input-group mb-2">
                  <input type="text" class="form-control param-input" placeholder="Param" data-param-id="${paramIdCounter}" data-field="param" required>
                  <input type="text" class="form-control param-input" placeholder="Description" data-param-id="${paramIdCounter}" data-field="desc" required>
                  <div class="input-group-text">
                  <input type="checkbox" class="param-input" data-param-id="${paramIdCounter}" data-field="required" aria-label="Checkbox for following text input">
                    <label for="checkbox" class="ms-2">Required</label>
                  </div>
                  <button type="button" class="btn btn-danger remove-param" data-param-id="${paramIdCounter}"><i class="fas fa-minus"></i></button>
                </div>
            `;
            paramsContainer.appendChild(newParamInput);
            paramIdCounter++;
        });

        addSnippetButton.addEventListener('click', function () {
          const newSnippetInput = document.createElement('div');
              newSnippetInput.className = 'snippet-group mb-2';
              newSnippetInput.setAttribute("data-snippet-id", snippetIdCounter);

            newSnippetInput.innerHTML = `
                  <div class="input-group mb-2">
                  <input type="text" class="form-control snippet-input" placeholder="File Name" data-snippet-id = "${snippetIdCounter}" data-field = "file_name" required>
                      <textarea class="form-control snippet-input" placeholder="Snippet Content" data-snippet-id = "${snippetIdCounter}" data-field = "snippet" rows="3"
                                required></textarea>
                  <button type="button" class="btn btn-danger remove-snippet" data-snippet-id = "${snippetIdCounter}"><i class="fas fa-minus"></i></button>
                </div>
              `;
            snippetsContainer.appendChild(newSnippetInput);
            snippetIdCounter++;
        });

        picsContainer.addEventListener('click', function(event){
            if (event.target.classList.contains('remove-pic')){
                const removeButton = event.target;
                const picIdToRemove = removeButton.getAttribute('data-pic-id');
                const picInputToRemove = picsContainer.querySelector(`.input-group[data-pic-id="${picIdToRemove}"]`);

                if(picInputToRemove)
                  picInputToRemove.remove();
            }
        });

          paramsContainer.addEventListener('click', function(event){
              if (event.target.classList.contains('remove-param')) {
                  const removeButton = event.target;
                  const paramIdToRemove = removeButton.getAttribute('data-param-id');
                  const paramGroupToRemove = paramsContainer.querySelector(`.param-group[data-param-id="${paramIdToRemove}"]`);

                  if (paramGroupToRemove) {
                      paramGroupToRemove.remove();
                  }
              }
          });
          snippetsContainer.addEventListener('click', function(event){
              if (event.target.classList.contains('remove-snippet')){
                  const removeButton = event.target;
                  const snippetIdToRemove = removeButton.getAttribute('data-snippet-id');
                const snippetGroupToRemove = snippetsContainer.querySelector(`.snippet-group[data-snippet-id="${snippetIdToRemove}"]`);

                  if(snippetGroupToRemove){
                      snippetGroupToRemove.remove();
                  }
              }
          })


          form.addEventListener('submit', async function(event) {
              event.preventDefault();

              const name = document.getElementById('name').value;
              const tags = document.getElementById('tags').value;
              const programming_language = document.getElementById('programming_language').value;


              const params = Array.from(paramsContainer.querySelectorAll('.param-group')).map(group => {
                const paramId = group.getAttribute('data-param-id');
                 return {
                        param: paramsContainer.querySelector(`.param-input[data-param-id="${paramId}"][data-field="param"]`).value,
                        desc: paramsContainer.querySelector(`.param-input[data-param-id="${paramId}"][data-field="desc"]`).value,
                        required: paramsContainer.querySelector(`.param-input[data-param-id="${paramId}"][data-field="required"]`).checked
                 };
              });
              const snippets = Array.from(snippetsContainer.querySelectorAll('.snippet-group')).map(group => {
                  const snippetId = group.getAttribute('data-snippet-id');
                return {
                        file_name: snippetsContainer.querySelector(`.snippet-input[data-snippet-id="${snippetId}"][data-field="file_name"]`).value,
                      snippet: snippetsContainer.querySelector(`.snippet-input[data-snippet-id="${snippetId}"][data-field="snippet"]`).value
                }
              });
                const formData = new FormData();
               const picInputs = picsContainer.querySelectorAll('.pic-input');
                picInputs.forEach(input => {
                  const picId = input.getAttribute('data-pic-id');
                    const files = input.files;
                  if(files.length > 0){
                    for (let i = 0; i < files.length; i++) {
                          formData.append(`pics_${picId}`, files[i]);
                        }
                    }
                });
                 formData.append('name', name);
                 formData.append('tags', tags);
                formData.append('programming_language', programming_language);
                formData.append('params', JSON.stringify(params));
                formData.append('snippets', JSON.stringify(snippets));
               try{
                  const response = await fetch('/submit-component', {
                      method: 'POST',
                      body: formData,
                  });
                  if (!response.ok) {
                      throw new Error(`HTTP error! Status: ${response.status}`);
                  }
                  const responseData = await response.text();
                   jsonOutput.textContent = JSON.stringify(JSON.parse(responseData).formData, null, 2);
                    jsonPreviewDiv.style.display = 'block';
                    console.log("Data saved correctly")

               }catch(error){
                  console.error('Error:', error);
                    alert("Error: Data not saved, check the logs for more information")
               }
          });
      });
  </script>
</body>

</html>